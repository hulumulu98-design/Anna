import asyncio
import logging
import aiohttp
import random
import re
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import BOT_TOKEN, DEEPSEEK_API_KEY, DEEPSEEK_API_URL, DEEPSEEK_MODEL, SYSTEM_PROMPT
from database import add_user, check_subscription

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

from aiohttp import web
import threading

async def health_check(request):
    return web.Response(text="OK")

def run_health_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks."""
    app = web.Application()
    app.router.add_get('/health', health_check)
    
    runner = web.AppRunner(app)
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(runner.setup())
        site = web.TCPSite(runner, '0.0.0.0', 8080)
        loop.run_until_complete(site.start())
        print("Health check server started on port 8080")
        loop.run_forever()
    except Exception as e:
        print(f"Health server error: {e}")

# –í —Ñ—É–Ω–∫—Ü–∏–∏ main():
def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º health server –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    health_thread = threading.Thread(target=run_health_server, daemon=True)
    health_thread.start()
    
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞ ...

def split_into_separate_messages(text: str) -> list:
    """–†–∞–∑–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º."""
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    text = re.sub(r'\s+', ' ', text.strip())
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentences = re.split(r'(?<=[.!?‚Ä¶]) +', text)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    merged_sentences = []
    current_message = ""
    
    for sentence in sentences:
        if not sentence.strip():
            continue
            
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º
        if len(current_message) < 20 and current_message:
            current_message += " " + sentence
        else:
            if current_message:
                merged_sentences.append(current_message)
            current_message = sentence
    
    if current_message:
        merged_sentences.append(current_message)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
    result = []
    for i, message in enumerate(merged_sentences):
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –∫–∞–∂–¥–æ–º—É 2-3 —Å–æ–æ–±—â–µ–Ω–∏—é
        if i % 4 == 0 and random.random() < 0.2:
            emojis = ['üòä', 'üí´', '‚ú®', 'ü§î', 'üí≠', '‚ù§Ô∏è', 'üòÇ', 'üéâ', 'üëÄ', 'ü§ó']
            message += f" {random.choice(emojis)}"
        result.append(message)
    
    return result

async def get_ai_response(user_message: str, user_id: int) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ API."""
    try:
        from database import add_message, get_recent_messages
        
        add_message(user_id, "user", user_message)
        chat_history = get_recent_messages(user_id, limit=8)
        messages_for_api = [SYSTEM_PROMPT] + chat_history

        payload = {
            "model": DEEPSEEK_MODEL,
            "messages": messages_for_api,
            "max_tokens": 150,  # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
            "temperature": 0.8,
        }

        headers = {
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
            "Content-Type": "application/json"
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(DEEPSEEK_API_URL, json=payload, headers=headers, timeout=30) as response:
                response.raise_for_status()
                data = await response.json()
                
                if 'choices' in data and len(data['choices']) > 0:
                    ai_response = data['choices'][0]['message']['content'].strip()
                    add_message(user_id, "assistant", ai_response)
                    return ai_response
                else:
                    return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –±–æ–ª—å—à–µ?"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_ai_response: {e}")
        return "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ–º–Ω–æ–≥–æ –∑–∞–¥—É–º–∞–ª–∞—Å—å... –û —á–µ–º —Ä–∞—Å—Å–∫–∞–∂–µ—à—å?"

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    try:
        user = update.effective_user
        user_message = update.message.text

        if not check_subscription(user.id):
            keyboard = get_main_keyboard(user.id)
            await update.message.reply_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è üòî",
                reply_markup=keyboard
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await update.message.chat.send_action(action="typing")
        await asyncio.sleep(1.0)  # –î–æ–ª—å—à–µ –¥–ª—è "–æ–±–¥—É–º—ã–≤–∞–Ω–∏—è"

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        ai_response = await get_ai_response(user_message, user.id)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {ai_response}")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_parts = split_into_separate_messages(ai_response)
        
        logger.info(f"–†–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ {len(message_parts)} —Å–æ–æ–±—â–µ–Ω–∏–π: {message_parts}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        for i, part in enumerate(message_parts):
            if i > 0:  # –î–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
                # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (0.8-1.5 —Å–µ–∫—É–Ω–¥—ã)
                pause_time = random.uniform(0.8, 1.5)
                await asyncio.sleep(pause_time)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await update.message.chat.send_action(action="typing")
                await asyncio.sleep(0.4)
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            keyboard = get_main_keyboard(user.id) if i == len(message_parts) - 1 else None
            
            await update.message.reply_text(part, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ
        error_messages = [
            "–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ",
            "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑? üí´",
            "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å! üòä"
        ]
        
        for i, msg in enumerate(error_messages):
            if i > 0:
                await asyncio.sleep(0.8)
            keyboard = get_main_keyboard(user.id) if i == len(error_messages) - 1 else None
            await update.message.reply_text(msg, reply_markup=keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    try:
        user = update.effective_user
        add_user(user.id, user.username, user.full_name)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        welcome_messages = [
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã",
            "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞! üí´",
            "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –∏ –ø–æ–±–æ–ª—Ç–∞—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã ‚ú®",
            "–£ —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 24 —á–∞—Å–∞! üéâ",
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        ]
        
        for i, message in enumerate(welcome_messages):
            if i > 0:
                await asyncio.sleep(0.8)
            keyboard = get_main_keyboard(user.id) if i == len(welcome_messages) - 1 else None
            await update.message.reply_text(message, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        error_messages = [
            "–ü—Ä–∏–≤–µ—Ç! üëã",
            "–†–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üòä",
            "–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å! üí≠"
        ]
        for i, msg in enumerate(error_messages):
            if i > 0:
                await asyncio.sleep(0.6)
            await update.message.reply_text(msg)

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    try:
        user = update.effective_user
        text = update.message.text
        
        if text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
            await profile(update, context)
        elif text == "üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            subscription_messages = [
                "üíé <b>–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</b>",
                "‚Ä¢ üó£Ô∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ",
                "‚Ä¢ üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏", 
                "‚Ä¢ ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
                "‚Ä¢ üéÅ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
                "–°—Ç–æ–∏–º–æ—Å—Ç—å: 299 —Ä—É–±./–º–µ—Å—è—Ü üí´",
                "–ù–∞–ø–∏—à–∏ @dirtydonny –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è! üòä"
            ]
            
            for i, msg in enumerate(subscription_messages):
                if i > 0:
                    await asyncio.sleep(0.7)
                parse_mode = 'HTML' if i == 0 else None
                await update.message.reply_text(msg, parse_mode=parse_mode)
                
        elif text == "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            invitation_messages = [
                "–û—Ç–ª–∏—á–Ω–æ! üí´",
                "–Ø —Å–ª—É—à–∞—é —Ç–µ–±—è... üëÇ",
                "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å! üíñ",
                "–û —á–µ–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? üòä"
            ]
            
            for i, msg in enumerate(invitation_messages):
                if i > 0:
                    await asyncio.sleep(0.6)
                keyboard = get_main_keyboard(user.id) if i == len(invitation_messages) - 1 else None
                await update.message.reply_text(msg, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_button: {e}")
        error_messages = [
            "–û–π... üòÖ",
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏...",
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! üí´"
        ]
        for i, msg in enumerate(error_messages):
            if i > 0:
                await asyncio.sleep(0.6)
            await update.message.reply_text(msg)

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."""
    try:
        user = update.effective_user
        from database import get_user_profile, check_subscription
        
        profile_data = get_user_profile(user.id)
        
        if not profile_data:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")
            return
        
        has_active_subscription = check_subscription(user.id)
        
        from datetime import datetime
        created_date = datetime.strptime(profile_data['created_at'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        profile_messages = [
            f"üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>",
            f"üìõ –ò–º—è: {profile_data['full_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}",
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {created_date}",
            f"üì® –°–æ–æ–±—â–µ–Ω–∏–π: {profile_data['message_count']}",
            f"üíé <b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if has_active_subscription else '‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞'}"
        ]
        
        if not has_active_subscription:
            profile_messages.append("üí´ –ù–∞–ø–∏—à–∏ @dirtydonny —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ!")
        
        for i, msg in enumerate(profile_messages):
            if i > 0:
                await asyncio.sleep(0.7)
            parse_mode = 'HTML' if i == 0 or i == 4 else None
            keyboard = get_main_keyboard(user.id) if i == len(profile_messages) - 1 else None
            await update.message.reply_text(msg, parse_mode=parse_mode, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ profile: {e}")
        error_messages = [
            "–ù–µ –º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å... üòî",
            "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üí´"
        ]
        for i, msg in enumerate(error_messages):
            if i > 0:
                await asyncio.sleep(0.6)
            await update.message.reply_text(msg)

def get_main_keyboard(user_id: int = None) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    try:
        has_subscription = check_subscription(user_id) if user_id else False
        
        keyboard = [
            [KeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")],
            [KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")]
        ]
        
        if not has_subscription:
            keyboard.append([KeyboardButton("üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")])
        
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, is_persistent=True)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_main_keyboard: {e}")
        return ReplyKeyboardMarkup([[KeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")]], resize_keyboard=True)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error("Exception while handling an update:", exc_info=context.error)
    
    try:
        if update and update.message:
            error_messages = [
                "–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ",
                "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑? üí´"
            ]
            for i, msg in enumerate(error_messages):
                if i > 0:
                    await asyncio.sleep(0.7)
                await update.message.reply_text(msg)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        application = Application.builder().token(BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("profile", profile))
        application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^(üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ|üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å|üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É)$'), handle_button))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_error_handler(error_handler)

        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ! üöÄ")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
